apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "es.voghdev.playbattlegrounds"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "isPaid"


    productFlavors {
        prod {
            Properties prop = new Properties();
            prop.load(project.rootProject.file('pubg-api.properties').newDataInputStream())
            def apiKey = prop.get("apiKey", null)
            if (apiKey == null)
                throw new GradleException("Can't find apiKey in pubg-api.properties. Please set it to your PUBG Api key");

            buildConfigField("String", "PUBGApiKey", "\"${apiKey}\"")
            buildConfigField("long", "Limit", "0L")
            dimension "isPaid"
        }

        season1 {
            Properties prop = new Properties();
            prop.load(project.rootProject.file('pubg-api.properties').newDataInputStream())
            def apiKey = prop.get("apiKey", null)
            if (apiKey == null)
                throw new GradleException("Can't find apiKey in pubg-api.properties. Please set it to your PUBG Api key");

            buildConfigField("String", "PUBGApiKey", "\"${apiKey}\"")
            buildConfigField("long", "Limit", "1529769061000L")
            dimension "isPaid"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

configurations {
    ktlint
}

task runUnitTests(dependsOn: [':app:testDebugUnitTest']) {
    description 'Run all unit tests'
}

task runAcceptanceTests(dependsOn: [':app:connectedAndroidTest']) {
    description 'Run all acceptance tests.'
}

task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.info("Using default MockMaker")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.7.5'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.16'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.16"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko-common:0.9.1a"
    testImplementation "com.nhaarman:mockito-kotlin:1.4.0"

    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.2'

    implementation 'io.arrow-kt:arrow-core:0.7.2'

    implementation 'org.kodein.di:kodein-di-generic-jvm:5.0.0'

    implementation 'com.github.pedrovgs:renderers:3.4.0'
    implementation 'com.github.arcadefire:nice-spinner:1.3.1'
    implementation "com.github.Raizlabs.DBFlow:dbflow-core:4.2.4"
    implementation "com.github.Raizlabs.DBFlow:dbflow:4.2.4"
    implementation "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:4.2.4"

    kapt "com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4"

    ktlint "com.github.shyiko:ktlint:0.15.0"
}

repositories {
    mavenCentral()
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlint.xml"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
